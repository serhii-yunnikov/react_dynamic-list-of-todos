{"version":3,"sources":["types/Select.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Select","TodoList","list","handleButton","isClicked","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","handleChanges","useState","all","selected","setSelected","query","setQuery","resetIsClicked","setResetIsClicked","modifiedList","active","filter","selectedList","todos","toUpperCase","includes","useEffect","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","handleClick","currentUser","setCurrentUser","userId","user","href","email","name","App","setList","selectedTodoId","setSelectedTodoId","todoIsClicked","setTodoIsClicked","listModified","setListModified","api","find","item","changedList","length","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50e3c63d.chunk.js","sourcesContent":["export enum Select {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  list: Todo[] | [];\n  handleButton: (todoId: number) => void;\n  isClicked: boolean;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  list,\n  handleButton,\n  isClicked,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {list.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !todo.completed,\n              },\n              {\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleButton(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames(\n                      'far',\n                      { 'fa-eye': !isClicked },\n                      { 'fa-eye-slash': isClicked },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Select } from '../../types/Select';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  list: Todo[],\n  handleChanges(changedList: Todo[] | []): void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  list,\n  handleChanges,\n}) => {\n  const [selected, setSelected] = useState(Select.all);\n  const [query, setQuery] = useState('');\n  const [resetIsClicked, setResetIsClicked] = useState(false);\n\n  const selectedList = () => {\n    switch (selected) {\n      case Select.active:\n        return list.filter(todo => todo.completed === false);\n      case Select.completed:\n        return list.filter(todo => todo.completed === true);\n      default:\n        return list;\n    }\n  };\n\n  const handleSelect: React.ChangeEventHandler<HTMLSelectElement>\n  = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelected(value as Select);\n  };\n\n  const modifiedList = selectedList().filter(todos => {\n    return todos.title.toUpperCase().includes(query.toUpperCase());\n  });\n\n  useEffect(() => {\n    handleChanges(modifiedList);\n  }, [query, selected]);\n\n  const eraseInput = () => {\n    setResetIsClicked(false);\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selected}\n            onChange={handleSelect}\n          >\n            <option value={Select.all}>All</option>\n            <option value={Select.active}>Active</option>\n            <option value={Select.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => {\n            setQuery(event.target.value);\n            setResetIsClicked(true);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {resetIsClicked\n        && query\n        && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={eraseInput}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\n\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo?: Todo;\n  handleClick: React.MouseEventHandler<HTMLButtonElement>;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  handleClick,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo?.userId)\n        .then(user => setCurrentUser(user));\n    }\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={currentUser.email}>\n                {currentUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [list, setList] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState<number>(0);\n  const [todoIsClicked, setTodoIsClicked] = useState(false);\n  const [listModified, setListModified] = useState(list);\n\n  const todoButtonStatus = () => {\n    setTodoIsClicked(false);\n  };\n\n  const listChanging = (changedList: Todo[] | []) => {\n    setListModified(changedList);\n  };\n\n  const setUserId = (todoId: number) => {\n    setSelectedTodoId(todoId);\n    setTodoIsClicked(true);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(api => {\n        setList(api);\n        setListModified(api);\n      });\n  }, []);\n\n  const todo = list.find(item => item.id === selectedTodoId);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                list={list}\n                handleChanges={listChanging}\n              />\n            </div>\n\n            <div className=\"block\">\n              {list.length > 0\n                ? (\n                  <TodoList\n                    list={listModified}\n                    handleButton={setUserId}\n                    isClicked={todoIsClicked}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoIsClicked && (\n        <TodoModal\n          handleClick={todoButtonStatus}\n          todo={todo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}